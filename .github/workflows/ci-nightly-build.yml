name: Nightly Build Package Push All

on:
  push:
    branches:
      - master
  schedule:
    # daily 04:00 (UTC) in the morning
    - cron: '0 4 * * *'

jobs:
  build:
    name: nightly
    runs-on: ubuntu-latest
    env:
      # to be shared amoung all steps of this job
      BASELINE: 2.0.0-M2
      PROJECT_ROOT_PATH: /home/runner/work/isis-nightly/isis
      CI_SCRIPTS_PATH: /home/runner/work/isis-nightly/isis/scripts/ci
      
      NIGHTLY_ROOT_PATH: ${{ github.workspace }}
      NIGHTLY_SCRIPTS_PATH: ${{ github.workspace }}/scripts
      
      # used only for printing
      # would be nice if we could transform the TIMESTAMP string into the REVISION 
      # variable here, but it seems github not yet has any string expression manipulation 
      # operators other than concatination   
      TIMESTAMP: ${{ github.event.head_commit.timestamp }}
      
      # set this to 'deploy' when intent is to push the built packages to a repo, 'install' otherwise
      # requires 'secrets' which we don't have yet 
      MVN_STAGES: deploy
      
      # though equivalent, setting SHARED_VARS_FILE to ~/.env breaks the build, not sure why
      # the tilde character appears to produce strange side-effects when used here  
      SHARED_VARS_FILE: /home/runner/.env

    steps:
    - name: Checkout Nightly
      uses: actions/checkout@v1
    
    - name: Checkout Apache Isis
      uses: actions/checkout@v1
      with:
        repository: apache/isis
        ref: refs/heads/master
        token: ${{ secrets.GitHub_PAT }}
    
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    
    - name: Print Maven Version
      run: mvn --version
    
    - name: Print Node Version
      run: node --version
    
    - name: Setup Script Environment
      shell: bash
      # we write the more tricky varibles to the $SHARED_VARS_FILE using the full power of bash commands
      # then we simply print all the (non-secret) variables as used by the build scripts to the console
      run: |
        echo REVISION=$BASELINE.$(date +%Y%m%d)-$(date +%H%M)-$(echo $GITHUB_SHA | cut -c1-8) > $SHARED_VARS_FILE
        echo ==============  ENV  =================
        echo BASELINE\: $BASELINE
        echo TIMESTAMP\: $TIMESTAMP
        echo PROJECT_ROOT_PATH\: $PROJECT_ROOT_PATH
        echo CI_SCRIPTS_PATH\: $CI_SCRIPTS_PATH
        echo MVN_STAGES\: $MVN_STAGES
        cat $SHARED_VARS_FILE
        echo ======================================

#    - name: Install NVM
#      shell: bash
#      run: bash $CI_SCRIPTS_PATH/install-nvm.sh
#      
#    - name: Install Antora
#      shell: bash
#      working-directory: ${{ env.PROJECT_ROOT_PATH }}
#      # we install the 'node' modules into the project root under 'node_modules', 
#      # because we have no privileges to install them globally with -g option
#      run: npm i @antora/cli@2.2 @antora/site-generator-default@2.2 asciidoctor-plantuml@1.3.1
#      
#    - name: Print Antora Version
#      shell: bash
#      working-directory: ${{ env.PROJECT_ROOT_PATH }}
#      run: $(npm bin)/antora version
#    
#    - name: Build Apache Isis Site
#      shell: bash
#      working-directory: ${{ env.PROJECT_ROOT_PATH }}
#      # builds static web content into ${PROJECT_ROOT_PATH}/antora/target/site,
#      # as specified in the site.yml file
#      run: |
#        bash $NIGHTLY_SCRIPTS_PATH/patch-site-config.sh ${PROJECT_ROOT_PATH}/site.yml
#        bash $CI_SCRIPTS_PATH/build-site.sh site.yml
#        # add a marker, that tells github not to use jekyll on the github pages folder
#        touch ${PROJECT_ROOT_PATH}/antora/target/site/.nojekyll
#      
#    - name: Rsync Site Content to Nightly Working Tree
#      shell: bash
#      run: bash $NIGHTLY_SCRIPTS_PATH/rsync-site.sh 
#      
#    - name: Commit Site Update
#      shell: bash
#      # will noop if git tree has not changed (see diff commands below)
#      run: |
#        git config --local user.email "action@github.com"
#        git config --local user.name "Apache Isis Committers (Bot)"
#        git add ./docs
#        git diff --quiet && git diff --staged --quiet || git commit -m "CI automated site update" -a
#        
#    - name: Push Site Update
#      # uses a predefinded action that does exactly this; will noop if git tree has not changed 
#      uses: ad-m/github-push-action@master
#      with:
#        github_token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Build Mixins
      shell: bash
      run: bash $CI_SCRIPTS_PATH/build-mixins.sh

#    - name: Build Core
#      shell: bash
#      run: bash $CI_SCRIPTS_PATH/build-core.sh
        
 
# FOR DEBUG USE
#   - name: Dump GitHub context 
#     env:
#       ENV_CONTEXT: ${{ toJson(env) }}
#     run: echo "$ENV_CONTEXT"
#   - name: Dump GitHub context 
#     env:
#       GITHUB_CONTEXT: ${{ toJson(github) }}
#     run: echo "$GITHUB_CONTEXT"
#   - name: Dump job context
#     env:
#       JOB_CONTEXT: ${{ toJson(job) }}
#     run: echo "$JOB_CONTEXT"
#   - name: Dump steps context
#     env:
#       STEPS_CONTEXT: ${{ toJson(steps) }}
#     run: echo "$STEPS_CONTEXT"
#   - name: Dump runner context
#     env:
#       RUNNER_CONTEXT: ${{ toJson(runner) }}
#     run: echo "$RUNNER_CONTEXT"
#   - name: Dump strategy context
#     env:
#       STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#     run: echo "$STRATEGY_CONTEXT"
#   - name: Dump matrix context
#     env:
#       MATRIX_CONTEXT: ${{ toJson(matrix) }}
#     run: echo "$MATRIX_CONTEXT"
           
           