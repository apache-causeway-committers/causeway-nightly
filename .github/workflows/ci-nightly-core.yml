name: Nightly Build Core

on:
  push:
    branches:
      - master
  schedule:
    # daily 04:00 (UTC) in the morning
    - cron: '0 4 * * *'

jobs:
  build:
    name: nightly-core
    runs-on: ubuntu-latest
    env:
      # to be shared amoung all steps of this job
      BASELINE: 2.0.0-M2
      PROJECT_ROOT_PATH: /home/runner/work/isis-nightly/isis
      CI_SCRIPTS_PATH: /home/runner/work/isis-nightly/isis/scripts/ci
      
      NIGHTLY_ROOT_PATH: ${{ github.workspace }}
      NIGHTLY_SCRIPTS_PATH: ${{ github.workspace }}/scripts
      
      # used only for printing
      # would be nice if we could transform the TIMESTAMP string into the REVISION 
      # variable here, but it seems github not yet has any string expression manipulation 
      # operators other than concatination   
      TIMESTAMP: ${{ github.event.head_commit.timestamp }}
      
      # set this to 'deploy' when intent is to push the built packages to a repo, 'install' otherwise
      MVN_STAGES: deploy
      
      # though equivalent, setting SHARED_VARS_FILE to ~/.env breaks the build, not sure why
      # the tilde character appears to produce strange side-effects when used here  
      SHARED_VARS_FILE: /home/runner/.env
      
      # deployment vars
      GH_DEPLOY_OWNER: apache-isis-committers
      GH_DEPLOY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # mvn build additional options
      # '-e' ... show stacktraces
      CORE_ADDITIONAL_OPTS: ''

    steps:
    - name: Checkout Nightly
      uses: actions/checkout@v1
    
    - name: Checkout Apache Isis
      uses: actions/checkout@v1
      with:
        repository: apache/isis
        ref: refs/heads/master
        token: ${{ secrets.GitHub_PAT }}
    
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    
    - name: Print Maven Version
      run: mvn --version
    
    - name: Setup Script Environment
      shell: bash
      # we write the more tricky varibles to the $SHARED_VARS_FILE using the full power of bash commands
      # then we simply print all the (non-secret) variables as used by the build scripts to the console
      run: |
        echo REVISION=${BASELINE}.$(date +%Y%m%d)-$(date +%H%M)-$(echo $GITHUB_SHA | cut -c1-8) > $SHARED_VARS_FILE
        echo ==============  ENV  =================
        echo BASELINE\: $BASELINE
        echo GH_DEPLOY_OWNER\: $GH_DEPLOY_OWNER 
        echo TIMESTAMP\: $TIMESTAMP
        echo PROJECT_ROOT_PATH\: $PROJECT_ROOT_PATH
        echo CI_SCRIPTS_PATH\: $CI_SCRIPTS_PATH
        echo MVN_STAGES\: $MVN_STAGES
        cat $SHARED_VARS_FILE
        echo ======================================
      
    - name: Build and Push Mixins (github packages)
      shell: bash
      working-directory: ${{ env.PROJECT_ROOT_PATH }}
      run: bash $NIGHTLY_SCRIPTS_PATH/nightly-build-mixins.sh

#    - name: Build and Push Core (github packages)
#      shell: bash
#      working-directory: ${{ env.PROJECT_ROOT_PATH }}
#      run: bash $NIGHTLY_SCRIPTS_PATH/nightly-build-core.sh
 
# FOR DEBUG USE
#   - name: Dump Env context 
#     env:
#       ENV_CONTEXT: ${{ toJson(env) }}
#     run: echo "$ENV_CONTEXT"
#   - name: Dump GitHub context 
#     env:
#       GITHUB_CONTEXT: ${{ toJson(github) }}
#     run: echo "$GITHUB_CONTEXT"
#   - name: Dump job context
#     env:
#       JOB_CONTEXT: ${{ toJson(job) }}
#     run: echo "$JOB_CONTEXT"
#   - name: Dump steps context
#     env:
#       STEPS_CONTEXT: ${{ toJson(steps) }}
#     run: echo "$STEPS_CONTEXT"
#   - name: Dump runner context
#     env:
#       RUNNER_CONTEXT: ${{ toJson(runner) }}
#     run: echo "$RUNNER_CONTEXT"
#   - name: Dump strategy context
#     env:
#       STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#     run: echo "$STRATEGY_CONTEXT"
#   - name: Dump matrix context
#     env:
#       MATRIX_CONTEXT: ${{ toJson(matrix) }}
#     run: echo "$MATRIX_CONTEXT"
#   - name: Create issue using REST API (example)
#     run: |
#       curl --request POST \
#       --url https://api.github.com/repos/${{ github.repository }}/issues \
#       --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
#       --header 'content-type: application/json' \
#       --data '{
#         "title": "Automated issue for commit: ${{ github.sha }}",
#         "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_."
#         }'           
           