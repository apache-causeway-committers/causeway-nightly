name: Nightly

on:
  workflow_dispatch:
  schedule:
    ## daily 04:00 (UTC) in the morning
    - cron: '0 4 * * *'

jobs:
  build:
    name: artifacts-and-site
    runs-on: ubuntu-latest
    env:
      # to be shared among all steps of this job
      BASELINE: 2.0.0-M4
      DEPLOY_TARGET: 'nexus_incode_work::default::https://nexus.incode.work/repository/nightly-builds/'

      # possible modes are
      # push ... push docker images to dockerhub
      # tar  ... build docker images and save them locally as tar files
      # skip ... skip docker image build steps
      JIB_MODE: push

      PROJECT_ROOT_PATH: /home/runner/work/isis-nightly/isis
      CI_SCRIPTS_PATH: /home/runner/work/isis-nightly/isis/scripts/ci

      NIGHTLY_ROOT_PATH: ${{ github.workspace }}
      NIGHTLY_SCRIPTS_PATH: ${{ github.workspace }}/scripts/nightly

      # used for printing
      TIMESTAMP: ${{ github.event.head_commit.timestamp }}

      # 'deploy' to push to repo, 'install' otherwise
      MVN_STAGES: deploy

    steps:
    - name: Checkout Nightly
      uses: actions/checkout@v2
      with:
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
        fetch-depth: 0 # otherwise, you will fail to push refs to dest repo

    - name: Calculate new Revision (if changed since last published, else skip)
      id: revision
      run: bash $NIGHTLY_SCRIPTS_PATH/new-revision.sh

    - name: Share new Revision as Environment Variable
      run: echo "REVISION=${{ steps.revision.outputs.revision }}" >> $GITHUB_ENV

    - name: Checkout Apache Isis
      if: steps.revision.outputs.revision != 'skip'
      uses: actions/checkout@v1
      with:
        repository: apache/isis
        ref: refs/heads/master
        #persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
        #fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
        token: ${{ secrets.GitHub_PAT }}

    - name: Set up JDK 11
      if: steps.revision.outputs.revision != 'skip'
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Print Maven Version
      if: steps.revision.outputs.revision != 'skip'
      run: mvn --version

    - name: Activate Cache for Maven Downloads
      if: steps.revision.outputs.revision != 'skip'
      uses: actions/cache@v2
      env:
        cache-name: cache-maven-modules
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Setup Script Environment
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      # prints all the (non-secret) variables as used by the build scripts to the console
      run: |
        echo ==============  ENV  =================
        echo BASELINE            \: $BASELINE
        echo TIMESTAMP           \: $TIMESTAMP
        echo PROJECT_ROOT_PATH   \: $PROJECT_ROOT_PATH
        echo CI_SCRIPTS_PATH     \: $CI_SCRIPTS_PATH
        echo NIGHTLY_ROOT_PATH   \: $NIGHTLY_ROOT_PATH
        echo NIGHTLY_SCRIPTS_PATH\: $NIGHTLY_SCRIPTS_PATH
        echo MVN_STAGES          \: $MVN_STAGES
        echo REVISION            \: $REVISION
        echo DEPLOY_TARGET       \: $DEPLOY_TARGET
        echo ======================================


    - name: Build and Push Artifacts (nexus.incode.work)
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      working-directory: ${{ env.PROJECT_ROOT_PATH }}
      run: |
        bash $CI_SCRIPTS_PATH/build-artifacts.sh
      env:
        ## nexus.incode.work
        NEXUS_INCODE_WORK_USERNAME: ${{ secrets.NEXUS_INCODE_WORK_USERNAME }}
        NEXUS_INCODE_WORK_PASSWORD: ${{ secrets.NEXUS_INCODE_WORK_PASSWORD }}
        MVN_ADDITIONAL_OPTS: '-DaltReleaseDeploymentRepository=${{ env.DEPLOY_TARGET }} -Dmaven.source.skip=true -Denforcer.failFast=true'
        SETTINGS_XML: ${{ env.PROJECT_ROOT_PATH }}/.m2/settings.xml
        ## hub.docker.com
        DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
        DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
        DOCKER_REGISTRY_URL: 'https://index.docker.io/v2/'

    - name: Code Quality Analysis
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      working-directory: ${{ env.PROJECT_ROOT_PATH }}
      run: |
        mvn verify sonar:sonar \
        -Dsonar.projectKey=apache_isis \
        -Dsonar.organization=apache \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.branch.name=master \
        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
        -DskipTests \
        -Denforcer.skip
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # ------------------------
    # -- now build the site --
    # ------------------------

    - name: Print Node Version
      if: steps.revision.outputs.revision != 'skip'
      run: node --version

    - name: Install NVM
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      run: bash $CI_SCRIPTS_PATH/install-nvm.sh

    - name: Install Antora
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      working-directory: ${{ env.PROJECT_ROOT_PATH }}
      # we install the 'node' modules into the project root under 'node_modules',
      # because we have no privileges to install them globally with -g option
      run: npm i npm i @antora/cli@2.3.3 @antora/site-generator-default@2.3.3 @asciidoctor/core@2.2.0 asciidoctor-kroki

    - name: Print Antora Version
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      working-directory: ${{ env.PROJECT_ROOT_PATH }}
      run: $(npm bin)/antora version

    - name: Setup Groovy
      if: steps.revision.outputs.revision != 'skip'
      run: sudo apt-get -f install groovy

    - name: Print Groovy Version
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      run: groovy --version

    - name: Setup Pandoc
      if: steps.revision.outputs.revision != 'skip'
      run: sudo apt-get -f install pandoc

    - name: Print Pandoc Version
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      run: pandoc --version

    - name: Build Apache Isis Site
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      working-directory: ${{ env.PROJECT_ROOT_PATH }}
      # builds static web content into ${PROJECT_ROOT_PATH}/antora/target/site,
      # as specified in the site.yml file
      run: |
        bash $NIGHTLY_SCRIPTS_PATH/patch-site-config.sh $PROJECT_ROOT_PATH/antora/playbooks/site.yml
        bash -x $CI_SCRIPTS_PATH/build-site.sh $PROJECT_ROOT_PATH/antora/playbooks/site.yml
      env:
        REVISION: ${{ steps.revision.outputs.revision }}

    - name: Rsync Site Content to Nightly Working Tree
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      run: bash $NIGHTLY_SCRIPTS_PATH/rsync-site.sh

    - name: Commit Site Update
      if: steps.revision.outputs.revision != 'skip'
      shell: bash
      # will noop if git tree has not changed (see diff commands below)
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Apache Isis Committers (Bot)"
        git add ./docs
        git diff --quiet && git diff --staged --quiet || git commit -m "CI automated site update" -a

    - name: Push Site Update
      # uses a predefined action that does exactly this; will noop if git tree has not changed
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.PUBLISH_TOKEN }}

    - name: Deploy demo-wicket to demo-wicket.isis.incode.work
      uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.K3D_INCODE_WORK_KUBE_CONFIG }}
      with:
        args: apply -f k8s/demo-wicket/deployment.yaml



# FOR DEBUG USE
#   - name: Dump Env context
#     env:
#       ENV_CONTEXT: ${{ toJson(env) }}
#     run: echo "$ENV_CONTEXT"
#   - name: Dump GitHub context
#     env:
#       GITHUB_CONTEXT: ${{ toJson(github) }}
#     run: echo "$GITHUB_CONTEXT"
#   - name: Dump job context
#     env:
#       JOB_CONTEXT: ${{ toJson(job) }}
#     run: echo "$JOB_CONTEXT"
#   - name: Dump steps context
#     env:
#       STEPS_CONTEXT: ${{ toJson(steps) }}
#     run: echo "$STEPS_CONTEXT"
#   - name: Dump runner context
#     env:
#       RUNNER_CONTEXT: ${{ toJson(runner) }}
#     run: echo "$RUNNER_CONTEXT"
#   - name: Dump strategy context
#     env:
#       STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#     run: echo "$STRATEGY_CONTEXT"
#   - name: Dump matrix context
#     env:
#       MATRIX_CONTEXT: ${{ toJson(matrix) }}
#     run: echo "$MATRIX_CONTEXT"
#   - name: Create issue using REST API (example)
#     run: |
#       curl --request POST \
#       --url https://api.github.com/repos/${{ github.repository }}/issues \
#       --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
#       --header 'content-type: application/json' \
#       --data '{
#         "title": "Automated issue for commit: ${{ github.sha }}",
#         "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_."
#         }'

