name: Nightly Site

on:
  push:
  schedule:
    # daily 05:00 (UTC) in the morning
    - cron: '0 5 * * *'

jobs:
  build:
    name: nightly-site
    runs-on: ubuntu-latest
    env:
      # to be shared amoung all steps of this job
      PROJECT_ROOT_PATH: /home/runner/work/isis-nightly/isis
      CI_SCRIPTS_PATH: /home/runner/work/isis-nightly/isis/scripts/ci
      
      NIGHTLY_ROOT_PATH: ${{ github.workspace }}
      NIGHTLY_SCRIPTS_PATH: ${{ github.workspace }}/scripts
      
      # used only for printing
      TIMESTAMP: ${{ github.event.head_commit.timestamp }}
      
    steps:
    - name: Checkout Nightly
      uses: actions/checkout@v1
      
    - name: Get latest published Revision
      id: revision
      run: bash $NIGHTLY_SCRIPTS_PATH/nightly-latest-revision.sh
    
    - name: Checkout Apache Isis
      uses: actions/checkout@v1
      with:
        repository: apache/isis
        ref: refs/heads/master
        token: ${{ secrets.GitHub_PAT }}
    
    - name: Print Maven Version
      run: mvn --version
    
    - name: Print Node Version
      run: node --version
    
    - name: Setup Script Environment
      shell: bash
      # we write the more tricky varibles to the $SHARED_VARS_FILE using the full power of bash commands
      # then we simply print all the (non-secret) variables as used by the build scripts to the console
      run: |
        echo ==============  ENV  =================
        echo TIMESTAMP\: $TIMESTAMP
        echo PROJECT_ROOT_PATH\: $PROJECT_ROOT_PATH
        echo CI_SCRIPTS_PATH\: $CI_SCRIPTS_PATH
        echo REVISION\: $REVISION
        echo ======================================
      env:
        REVISION: ${{ steps.revision.outputs.revision }}}

    - name: Install NVM
      shell: bash
      run: bash $CI_SCRIPTS_PATH/install-nvm.sh
      
    - name: Install Antora
      shell: bash
      working-directory: ${{ env.PROJECT_ROOT_PATH }}
      # we install the 'node' modules into the project root under 'node_modules', 
      # because we have no privileges to install them globally with -g option
      run: npm i @antora/cli@2.2 @antora/site-generator-default@2.2 asciidoctor-plantuml@1.3.1
      
    - name: Print Antora Version
      shell: bash
      working-directory: ${{ env.PROJECT_ROOT_PATH }}
      run: $(npm bin)/antora version
    
    
    
    - name: Build Apache Isis Site
      shell: bash
      working-directory: ${{ env.PROJECT_ROOT_PATH }}
      # builds static web content into ${PROJECT_ROOT_PATH}/antora/target/site,
      # as specified in the site.yml file
      run: |
        bash $NIGHTLY_SCRIPTS_PATH/patch-site-config.sh ${PROJECT_ROOT_PATH}/site.yml
        bash $CI_SCRIPTS_PATH/build-site.sh site.yml
        # add a marker, that tells github not to use jekyll on the github pages folder
        touch ${PROJECT_ROOT_PATH}/antora/target/site/.nojekyll
      env:
        REVISION: ${{ steps.revision.outputs.revision }}
      
    - name: Rsync Site Content to Nightly Working Tree
      shell: bash
      run: bash $NIGHTLY_SCRIPTS_PATH/rsync-site.sh 
      
    - name: Commit Site Update
      shell: bash
      # will noop if git tree has not changed (see diff commands below)
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Apache Isis Committers (Bot)"
        git add ./docs
        git diff --quiet && git diff --staged --quiet || git commit -m "CI automated site update" -a
        
    - name: Push Site Update
      # uses a predefinded action that does exactly this; will noop if git tree has not changed 
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
     

           
           