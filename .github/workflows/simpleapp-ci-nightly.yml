name: Simpleapp (CI Nightly)

on:
  workflow_dispatch:
#  schedule:
#    ## daily 04:00 (UTC) in the morning
#    - cron: '0 4 * * *'



jobs:
  build:
    name: Build, Test, Docker Image, Push
    runs-on: ubuntu-latest
    env:
      # to be shared among all steps of this job
      PROJECT_ROOT_PATH: /home/runner/work/isis-nightly/isis-app-simpleapp
      NIGHTLY_ROOT_PATH: ${{ github.workspace }}
      BASELINE: 2.0.0-M4
      APP: isis-app-simpleapp

    steps:
    - name: Checkout current repo
      uses: actions/checkout@v2.3.3
#      with:
#        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
#        fetch-depth: 0 # otherwise, you will fail to push refs to dest repo

    - name: Calculate new Revision
      id: revision
      run: |
        #BASELINE=$(cat $PROJECT_ROOT_PATH/pom.xml | grep "<version>" | head -1 | awk -F'>' '{print $2}' | awk -F'<' '{print $1}')
        SHA_ID=$(curl -s --request GET \
                 --url https://api.github.com/repos/apache/$APP/git/ref/heads/master \
                 --header 'content-type: application/json' \
                 | grep sha | cut -d\: -f2 | cut -d\" -f2 | cut -c1-8)
        REVISION=${BASELINE}.$(date +%Y%m%d-%H%M)-${SHA_ID}
        echo "##[set-output name=revision;]${REVISION}"

    - name: Share new Revision as Environment Variable
      run: echo "REVISION=${{ steps.revision.outputs.revision }}" >> $GITHUB_ENV

    - name: Checkout apache/isis-app-simpleapp repo
      uses: actions/checkout@v2.3.3
      with:
        repository: apache/isis-app-simpleapp
        ref: refs/heads/master
        #persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
        #fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
        #token: ${{ secrets.GitHub_PAT }}

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Print Maven Version
      run: mvn --version

    - name: Activate Cache for Maven Downloads
      uses: actions/cache@v2
      env:
        cache-name: cache-maven-modules
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Setup Script Environment
      shell: bash
      # prints all the (non-secret) variables as used by the build scripts to the console
      run: |
        echo ==============  ENV  =================
        echo BASELINE            \: $BASELINE
        echo PROJECT_ROOT_PATH   \: $PROJECT_ROOT_PATH
        echo NIGHTLY_ROOT_PATH   \: $NIGHTLY_ROOT_PATH
        echo REVISION            \: $REVISION
        echo ======================================

    - name: Build with Maven
      shell: bash
      run: |
        mvn install

    - name: Build and Push Docker Image
      shell: bash
      run: |
        mvn -pl webapp -Ddocker jib:build
      env:
        DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
        DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
        DOCKER_REGISTRY_URL: 'https://index.docker.io/v2/'
